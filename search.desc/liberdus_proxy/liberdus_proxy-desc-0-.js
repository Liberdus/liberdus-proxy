searchState.loadedDescShard("liberdus_proxy", 0, "Liberdus proxy server\nArchiver Utility Module\nThis module provides utilities to interact with a …\nConfiguration for the rpc server.\nReturns the argument unchanged.\nClient Request Handler Module\nCalls <code>U::from(self)</code>.\nThis module contains the node management logic require for …\nDiscovers active archivers in the network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the reference counted clone of active archivers …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the original data of a transaction.\nRepresents the original data of a transaction.\nRepresents a single transaction.\nRepresents the API response for transaction queries.\nThe transaction data as a JSON value.\nContains error details if the operation was not successful.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPlaceholder function for fetching messages.\nFetches a specific transaction by its ID.\nFetches the transaction history for a specific account.\nInserts a key-value pair into a JSON object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe original transaction data.\nIndicates if the operation was successful.\nA list of transactions returned by the API.\nThe transaction data as a JSON value.\nThe unique identifier for the transaction.\nStandalone network mean that consensus node and archivers …\nTLS configuration\nThis is a system directory path to the archiver seed file …\ncryptographic seed\nThis is currently not used anywhere\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe port on which the proxy server will listen\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum time in milliseconds that the rpc will cancel …\nThe interval in seconds at which the node list will be …\nStandalone network configuration\nTCP keep alive time in seconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the input string using the specified format.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new ShardusCrypto instance with the given key.\nSigns the input data using the provided secret key.\nVerifies a signature using the provided public key.\nReads from the stream until the end of the headers or the …\nOuter loop to handle multiple HTTP requests from the same …\nParses the <code>Content-Length</code> header from the given headers. …\nTakes the stream, responds with a 500 Internal Server …\nTakes the stream, responds with a timeout error, and …\nHelper function to insert or replace a header in the HTTP …\nCalculates a node’s bias for weighted random selection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function is the defecto way to get a consensor. When …\nSelects a random node from the active list based on …\nHandles the client request stream by reading the request, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes and maintains a cumulative bias distribution for …\ntrigger a full nodelist update from one of the archivers\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nHandles the client request stream by reading the request, …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")